use mmr::{Entry, EntryLink, NodeData};

use crate::librustzcash_mmr_append;

const NODE_DATA: &str = r

fn preload_tree_append(vec: &Vec<NodeData>) -> (Vec<u32>, Vec<[u8; mmr::MAX_ENTRY_SIZE]>) {
    assert!(vec.len() > 0);

    // integer log2 of (vec.len()+1), -1
    let mut h = (32 - ((vec.len() + 1) as u32).leading_zeros() - 1) - 1;
    let mut peak_pos = (1 << (h + 1)) - 1;

    let mut peak_indices = Vec::new();
    let mut peaks = Vec::new();

    loop {
        if peak_pos > vec.len() {
            // left child, -2^h
            peak_pos = peak_pos - (1 << h);
            h = h - 1;
        }

        if peak_pos <= vec.len() {
            let mut peak: Entry = vec[peak_pos - 1].clone().into();
            if h != 0 {
                peak.update_siblings(
                    EntryLink::Stored((peak_pos - (1 << h) - 1) as u32),
                    EntryLink::Stored((peak_pos - 2) as u32),
                );
            }
            peak_indices.push((peak_pos - 1) as u32);
            let mut entry_buf = [0u8; mmr::MAX_ENTRY_SIZE];
            peak.write(&mut &mut entry_buf[..])
                .expect("Entry write failed");
            peaks.push(entry_buf);

            // right sibling
            peak_pos = peak_pos + (1 << (h + 1)) - 1;
        }

        if h == 0 {
            break;
        }
    }

    (peak_indices, peaks)
}

fn load_nodes() -> Vec<NodeData> {
    let mut res = Vec::new();

    let node_data: Vec<u8> = hex::decode(NODE_DATA).expect("Valid by declaration");

    let mut cursor = std::io::Cursor::new(&node_data[..]);
    while (cursor.position() as usize) < node_data.len() {
        let node_data =
            mmr::NodeData::read(0, &mut cursor).expect("Statically checked to be correct");
        res.push(node_data);
    }

    res
}

#[test]
fn append() {
    let nodes = load_nodes();
    let (indices, peaks) = preload_tree_append(&nodes);

    let mut rt_ret = [0u8; 32];

    let mut buf_ret = Vec::<[u8; mmr::MAX_NODE_DATA_SIZE]>::with_capacity(32);

    let mut new_node_data = [0u8; mmr::MAX_NODE_DATA_SIZE];
    let new_node = NodeData {
        consensus_branch_id: 0,
        subtree_commitment: [0u8; 32],
        start_time: 101,
        end_time: 110,
        start_target: 190,
        end_target: 200,
        start_sapling_root: [0u8; 32],
        end_sapling_root: [0u8; 32],
        subtree_total_work: Default::default(),
        start_height: 10,
        end_height: 10,
        shielded_tx: 13,
    };
    new_node
        .write(&mut &mut new_node_data[..])
        .expect("Failed to write node data");

    let result = librustzcash_mmr_append(
        0,
        nodes.len() as u32,
        indices.as_ptr(),
        peaks.as_ptr(),
        peaks.len(),
        new_node_data.as_ptr(),
        rt_ret.as_mut_ptr(),
        buf_ret.as_mut_ptr(),
    );

    unsafe {
        buf_ret.set_len(result as usize);
    }

    assert_eq!(result, 2);

    let new_node_1 =
        NodeData::from_bytes(0, &buf_ret[0][..]).expect("Failed to reconstruct return node #1");

    let new_node_2 =
        NodeData::from_bytes(0, &buf_ret[1][..]).expect("Failed to reconstruct return node #2");

    assert_eq!(new_node_1.start_height, 10);
    assert_eq!(new_node_1.end_height, 10);

    // this is combined new node (which is `new_node_1`) + the one which was there before (for block #9)
    assert_eq!(new_node_2.start_height, 9);
    assert_eq!(new_node_2.end_height, 10);
    assert_eq!(new_node_2.shielded_tx, 25);
}
